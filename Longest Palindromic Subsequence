//https://practice.geeksforgeeks.org/problems/longest-palindromic-subsequence/0

#include <bits/stdc++.h>
using namespace std;
int longestPalindromeSubseq(string s)
{
      
        int n = s.length() , maxi = 1 ; 
        int dp [ n ] [ n ]  ; 
        memset ( dp , 0 , sizeof ( dp ) ) ; 
        
        for ( int i = 0 ; i < n ; i ++ )
                dp [ i ] [ i ] = 1 ; 
        
        for ( int i = 0 ; i + 1 < n ; i ++ )
        {
            if ( s [ i ] == s [ i + 1 ] )
                    dp [ i  ] [ i + 1 ] = 2 ; 
            else
                dp [ i ] [ i + 1 ] = 1 ; 
            maxi = max ( dp [ i ] [ i + 1 ] , maxi ) ; 
        }
        
        for ( int i = 2 ; i < n ; i ++ )
        {
            int row = 0 , col = i; 
            while ( row < n and col < n )
            {
                if ( s [ row ] == s [ col ] )
                {
                   
                    if  ( row + 1 < n )
                            dp [ row ] [ col ] =  dp [ row + 1 ] [ col - 1 ] + 2  ; 
                    
                    
                }
                else 
                {
                      if  ( row + 1 < n )
                            dp [ row ] [ col ] =dp [ row + 1 ] [ col  ] ; 
                      dp [ row ] [ col ] = max ( dp [ row] [ col ] , dp [ row ][ col - 1 ] ) ;   

                }
                //cout << row << " " << col << " " << dp [ row ] [ col ] <<  endl ; 
                maxi =  max ( maxi , dp [ row ] [ col ] ) ; 
                row ++ , col ++ ; 
            }
        }
        /*for ( int i = 0 ; i < n ; i ++ )
        {
            for ( int j = 0 ; j < n ; j ++ )
                    cout << dp [ i ] [ j ] << " " ; 
           cout << endl ; 
        }*/
        return maxi ; 
}
int main() {
    
    
    int T ; 
    cin >> T ; 
    while ( T-- )
    {
        string s; 
        cin  >> s ; 
        cout << longestPalindromeSubseq(  s) << endl ;  
    }
}
