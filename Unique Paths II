//https://leetcode.com/problems/unique-paths-ii/


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& v) {
        
        
        
        long long int n = v.size() ; 
        if (!n)
                return 0 ;
        int m = v [ 0 ] .size() ;
        if ( !m)
                return 0 ; 
        long long  int dp [ n ] [ m ] ; 
        memset ( dp , 0 , sizeof ( dp ) ) ; 
        
        if ( v [ 0 ] [ 0 ] )
                dp [ 0 ][ 0 ] = 0 ; 
        else 
                dp [ 0 ][  0 ] = 1  ; 
        for ( long long  int i = 0 ; i < n ; i ++ )
        {
           
            for ( long long  int j = 0 ; j < m ; j ++ )
            {
                
                if ( v [ i ] [ j ] )
                        continue ; 
                if ( j - 1 >= 0 )
                        dp [ i ][ j ] += dp [ i ] [ j - 1 ] ; 
                
                if ( i - 1 >= 0 ) 
                        dp [ i ] [ j] += dp [ i -1 ] [ j ] ; 
            }
        }
        
        
        
        return dp [ n - 1 ][ m - 1] ; 
        
        
        
    }
};
