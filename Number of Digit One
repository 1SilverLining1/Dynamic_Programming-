//https://leetcode.com/problems/number-of-digit-one/submissions/class Solution {
public:
    const int N = 20; 
    int dp [ 20 ] [ 2 ][  20 ] ; 
    
    int  cal ( vector < int >  v, int index , int n , int flag , int cnt  )
    {
        if ( index  == n )
        {
                
            return cnt; 
        }
        
       if ( dp [ index ] [ flag ][ cnt ] != -1)
                return dp [ index ] [ flag ] [cnt ];
        
        int ans = 0 ;
        int limit = flag ? 9 : v [ index ] ; 
        
        for ( int i = 0 ; i <= limit ; i ++ )
        {
            int currentcnt = cnt ; 
            if ( i == 1 )
                    currentcnt ++ ; 
            int currentflag = flag ; 
            if ( i < v [ index ] )
                    currentflag = 1 ;
            ans +=cal ( v , index +  1 , n , currentflag , currentcnt ) ; 
        }
        
        return dp [ index ] [ flag] [ cnt ] = ans ; 
        
    }
    
    
   
    int countDigitOne(int n) {
        
        
        vector < int > v ; 
        while ( n )
        {
            v.push_back ( n % 10 ) ; 
            n = n / 10 ; 
        }
        
        reverse ( v.begin() , v.end() ) ; 
        int cnt = 0 ; 
        memset ( dp , -1 , sizeof( dp ) ) ; 
        return cal ( v , 0 , v.size() , 0 , cnt) ; 
        
    }
};
